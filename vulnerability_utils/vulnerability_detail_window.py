# File: vulnerability_utils/vulnerability_detail_window.py

import tkinter as tk
from tkinter import ttk
from datetime import datetime

class VulnerabilityDetailWindow:
    def __init__(self, parent, details):
        self.window = tk.Toplevel(parent)
        self.window.title(f"Details for {details['id']}")
        self.details = details
        self._setup_widgets()

    def _setup_widgets(self):
        self.window.geometry("600x500")
        
        frame = ttk.Frame(self.window, padding="10")
        frame.pack(fill=tk.BOTH, expand=True)

        published = self.format_date(self.details.get('published', 'Unknown'))
        last_modified = self.format_date(self.details.get('last_modified', 'Unknown'))

        ttk.Label(frame, text=f"Device Name: {self.details.get('device_name', 'Unknown')}", font=("Arial", 12, "bold")).pack(pady=5)
        ttk.Label(frame, text=f"CVE ID: {self.details['id']}", font=("Arial", 12, "bold")).pack(pady=5)
        ttk.Label(frame, text=f"Published: {published}", font=("Arial", 12)).pack(pady=5)
        ttk.Label(frame, text=f"Last Modified: {last_modified}", font=("Arial", 12)).pack(pady=5)
        ttk.Label(frame, text=f"Severity: {self.details['severity']}", font=("Arial", 12)).pack(pady=5)
        ttk.Label(frame, text=f"Impact Score: {self.details['impact_score']}", font=("Arial", 12)).pack(pady=5)
        ttk.Label(frame, text=f"Exploitability Score: {self.details['exploitability_score']}", font=("Arial", 12)).pack(pady=5)
        
        ttk.Label(frame, text="Description:", font=("Arial", 12, "bold")).pack(pady=5)
        description_text = tk.Text(frame, wrap=tk.WORD, height=5, width=70)
        description_text.insert(tk.END, self.details['description'])
        description_text.config(state=tk.DISABLED)
        description_text.pack(pady=5)

        ttk.Label(frame, text="References:", font=("Arial", 12, "bold")).pack(pady=5)
        references_text = tk.Text(frame, wrap=tk.WORD, height=5, width=70)
        for ref in self.details['references']:
            references_text.insert(tk.END, ref + "\n")
        references_text.config(state=tk.DISABLED)
        references_text.pack(pady=5)

    def format_date(self, date_str):
        try:
            date = datetime.fromisoformat(date_str)
            return date.strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            return date_str