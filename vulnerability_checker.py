import requests
import re
import spacy

class VulnerabilityChecker:
    SUFFIXES = ['Inc.', 'Ltd.', 'Co.', 'Corporation', 'LLC', 'SA', 'GmbH', 'AG', 'S.A.', 'Pvt.', 'PLC', 'Limited']
    KNOWN_BRANDS = ['xiaomi', 'apple', 'microsoft', 'samsung', 'huawei', 'lenovo', 'dell', 'hp', 'asus', 'acer']
    BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'
    }

    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")

    def extract_keyword(self, vendor_name):
        cleaned_name = self._clean_vendor_name(vendor_name)
        keywords = self._extract_keywords(cleaned_name)
        return self._get_best_keyword(keywords, cleaned_name)

    def _clean_vendor_name(self, vendor_name):
        pattern = re.compile(r'\b(?:' + '|'.join(self.SUFFIXES) + r')\b', re.IGNORECASE)
        vendor_name = pattern.sub('', vendor_name).strip()
        return re.sub(r'[^\w\s]', '', vendor_name)

    def _extract_keywords(self, cleaned_name):
        doc = self.nlp(cleaned_name)
        return [chunk.text.lower() for chunk in doc.noun_chunks if chunk.root.pos_ in ['PROPN', 'NOUN']]

    def _get_best_keyword(self, keywords, cleaned_name):
        for keyword in keywords:
            for brand in self.KNOWN_BRANDS:
                if brand in keyword:
                    return brand
        return keywords[0] if keywords else cleaned_name.split()[0].lower()

    def search_vulnerabilities(self, model, vendor, max_results=10):
        # First, search by model
        model_vulnerabilities = self._search_by_keyword(model, max_results)
        if model_vulnerabilities:
            return model_vulnerabilities
        
        # If no vulnerabilities found, search by vendor
        vendor_vulnerabilities = self._search_by_keyword(vendor, max_results)
        return vendor_vulnerabilities

    def _search_by_keyword(self, keyword, max_results):
        params = self._build_params(keyword, max_results)
        response = requests.get(self.BASE_URL, params=params, headers=self.HEADERS)
        return self._parse_response(response)

    def _build_params(self, keyword, max_results):
        params = {
            'keywordSearch': keyword,
            'resultsPerPage': max_results
        }
        if ' ' in keyword:
            params['keywordExactMatch'] = ''
        return params

    def _parse_response(self, response):
        if response.status_code == 200:
            vulnerabilities = response.json().get('vulnerabilities', [])
            vulnerabilities.sort(key=lambda x: x.get('cve', {}).get('published', ''), reverse=True)
            return vulnerabilities
        return []